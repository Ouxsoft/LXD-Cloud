-
  become: true
  become_method: su
  become_user: root
  connection: ssh
  hosts: 
        - nagios_servers
  tasks:

  # generate host config file
  - name: generate ssh config based on inventory
    blockinfile:
        marker: "#####  ANSIBLE GENERATED ################################################## [ {mark} ]"
        create: yes
        path: /usr/local/nagios/etc/objects/hosts_ansible.cfg
        block: |
                # 
                # WARNING
                #
                # This section was automatically generated by Ansible. Any changes will be lost made
                # here will be overwritten. Instead, make changes on the Ansible server to the file
                # /etc/ansible/hosts. After updating the file run the Ansible playbook to test the
                # changes, update hosts, and restart nagios.
                #
                # If the playbook runs then no further action is needed. If the playbook fails to run,
                # check the modifications made to the host file. All hosts listed with a DNS entry 
                # must exist to enable dig to work.
                #                                                                                   -hX
                # --- Hosts ---------------------------------------------------------------------------
                {% for host in hostvars if lookup('dig', host) | ipaddr  %}
                # {{ host }}
                define host {
                          use             {{ hostvars[host]['nagios_template'] | default('windows-container') }}
                          host_name       {{ host | regex_replace('.' + dns_search) }}
                          alias           {{ host | regex_replace('.' + dns_search) }}
                          address         {{ lookup('dig', host) | default('127.0.0.1') }}
                          parents         {{ hostvars[host]['parent_host'] | default('server-switch', true) | regex_replace('.' + dns_search) }}
                }
                {% endfor %} 

                # --- Hosts Groups --------------------------------------------------------------------
                {% for group in groups if group != 'ungrouped' %}
                # {{ group }} 
                define hostgroup {
                       hostgroup_name  {{ group }} 
                       members         {{ groups[group] | join(', ') | regex_replace('.' + dns_search) }}
                }
                {% endfor %}

                # --- Services ------------------------------------------------------------------------
                # {{lookup('file', 'service.cfg') }}

  # test new config
  - name: Test
    shell: /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
    register: response_check

  # restart nagios, if it passes test
  - name: Restart nagios
    service:
        name: nagios
        state: restarted
    when: response_check.changed
    register: response_restart

  - set_fact:
        email_body: "{{ response_check.stdout | default('') | regex_replace('\n','<br>') }} {{ response_restart.stdout | default('') | regex_replace('\n','<br>') }}"

  - mail:
     host: "{{ mail.host }}"
     port: "{{ mail.port }}"
     username: "{{ mail.username }}"
     password: "{{ mail.password }}"
     to: "{{ mail.to }}"
     subject: "[{{ ansible_date_time.date }}] Ansible > Nagios Hosts Updated"
     body: "{{ email_body }}"
     subtype: html
